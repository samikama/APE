cmake_minimum_required (VERSION 2.8)
find_package(CUDA REQUIRED)
if((${CMAKE_VERSION} VERSION_GREATER "3.1.0") OR (${CMAKE_VERSION} VERSION_EQUAL "3.1.0"))
  set( CMAKE_CXX_STANDARD 11 CACHE STRING "C++ standard used for the build" )
  set( CMAKE_CXX_EXTENSIONS FALSE CACHE BOOL "(Dis)allow using GNU extensions" )
else()
  add_definitions(-std=c++11)
endif()
set(CUDA_VERBOSE_BUILD ON)
include_directories(${CUDA_TOOLKIT_ROOT_DIR}/samples/common/inc)
set(nvccExtraFlags -Xcompiler=-fPIC -O2 -g; -Xlinker=-fPIC -g; -lineinfo; -std=c++11 )
set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-gencode arch=compute_30,code=sm_30;-gencode arch=compute_35,code=sm_35;-shared;${nvccExtraFlags})
CUDA_COMPILE(kernels cudaFuncs.cu  SHARED)
dump_var(kernels)
dump_var(CUDA_NVCC_FLAGS)
#CUDA_ADD_LIBRARY(dctModule dct8x8Module.cxx dctCudaWork1.cu dctCudaWork2.cu SHARED)
add_library(dctModule SHARED dct8x8Module.cxx BmpUtil.cpp dctCudaWork1.cxx dctCudaWork2.cxx ${kernels} )
add_executable(dctClient dctClient.cxx BmpUtil.cpp)
set_target_properties(dctModule PROPERTIES COMPILE_FLAGS " -I${CUDA_INCLUDE_DIRS} ")
set_target_properties(dctClient PROPERTIES COMPILE_FLAGS " -I${YAMPL_INCLUDE_DIRS} ")
target_link_libraries(dctModule ${CUDA_LIBRARIES})
target_link_libraries(dctClient ${YAMPL_LIBRARIES} APEContainer APEUtils APEConfig )
install(TARGETS dctModule DESTINATION lib)
install(TARGETS dctClient DESTINATION bin)
